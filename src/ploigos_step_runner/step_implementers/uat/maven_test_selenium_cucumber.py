"""`StepImplementer` for the `uat` step using Maven driving Selenium generating Cucumber reports.

Step Configuration
------------------
Step configuration expected as input to this step.
Could come from:
* static configuration
* runtime configuration
* previous step results

Configuration Key            | Required? | Default | Description
-----------------------------|-----------|---------|------------
`pom-file`                   | Yes       | `'pom.xml'` | pom used when executing maven.
`tls-verify`                 | No        | `True`  | Disables TLS Verification if set to False
`maven-profiles`             | No        | `['integration-test']` \
                                                   | \
                                    List of maven profiles to use. \
                                    Typically user acceptance tests are executed \
                                    using a specific profile using `maven test`. \
                                    If your user acceptance tests are run \
                                    differently look to use \
                                    `ploigos_step_runner.step_implementers.shared.MavenGeneric` \
                                    instead.
`maven-no-transfer-progress` | No        | `True`  | \
                            `True` to suppress the transfer progress of packages maven downloads.
                            `False` to have the transfer progress printed.\
                            See https://maven.apache.org/ref/current/maven-embedder/cli.html
`maven-additional-arguments` | No        | `[]`    | List of additional arguments to use.
`maven-servers`              | No        |         | Dictionary of dictionaries of \
                                                     id, username, password
`maven-repositories`         | No        |         | Dictionary of dictionaries of \
                                                     id, url, snapshots, releases
`maven-mirrors`              | No        |         | Dictionary of dictionaries of \
                                                     id, url, mirror_of
`fail-on-no-tests`           | Yes       | `True ` | `True` to fail if there are not tests to run. \
                                                     `False` to ignore if there are no tests to run.
`selenium-hub-url`           | Yes       |         | URL where the Selenium Hub is running
`target-host-url`            | Maybe     |         | Target host URL for UAT. \
                                                      <br/> \
                                                      If not given then use first host url from \
                                                      `deployed-host-urls`.
`deployed-host-urls`         | Maybe     |         | Deployed host URLs. If `target-host-url` \
                                                     is not given then use first URL from this \
                                                     list. If `target-host-url` is given then \
                                                     ignore this value.

Result Artifacts
----------------
Results artifacts output by this step.

Result Artifact Key    | Description
-----------------------|------------
`maven-output`         | Path to Stdout and Stderr from invoking Maven.
`surefire-reports`     | Path to Surefire reports generated by Maven.
`cucumber-report-html` | Path to Cucumber HTML report generated by Maven.
`cucumber-report-json` | Path to Cucumber JSON report generated by Maven.
"""

import os

from ploigos_step_runner import StepResult
from ploigos_step_runner.exceptions import StepRunnerException
from ploigos_step_runner.step_implementers.shared.maven_generic import \
    MavenGeneric
from ploigos_step_runner.utils.xml import \
    aggregate_xml_element_attribute_values

DEFAULT_CONFIG = {
    'maven-profiles': ['integration-test'],
    'fail-on-no-tests': True
}

REQUIRED_CONFIG_OR_PREVIOUS_STEP_RESULT_ARTIFACT_KEYS = [
    'pom-file',
    'fail-on-no-tests',
    'selenium-hub-url',
]

class MavenTestSeleniumCucumber(MavenGeneric):
    """`StepImplementer` for the `uat` step using Maven driving Selenium generating
    Cucumber reports.
    """
    def __init__(  # pylint: disable=too-many-arguments
        self,
        workflow_result,
        parent_work_dir_path,
        config,
        environment=None
    ):
        super().__init__(
            workflow_result=workflow_result,
            parent_work_dir_path=parent_work_dir_path,
            config=config,
            environment=environment,
            maven_phases_and_goals=['test']
        )

    @staticmethod
    def step_implementer_config_defaults():
        """Getter for the StepImplementer's configuration defaults.

        Returns
        -------
        dict
            Default values to use for step configuration values.

        Notes
        -----
        These are the lowest precedence configuration values.
        """
        return {**MavenGeneric.step_implementer_config_defaults(), **DEFAULT_CONFIG}

    @staticmethod
    def _required_config_or_result_keys():
        """Getter for step configuration or previous step result artifacts that are required before
        running this step.

        See Also
        --------
        _validate_required_config_or_previous_step_result_artifact_keys

        Returns
        -------
        array_list
            Array of configuration keys or previous step result artifacts
            that are required before running the step.
        """
        return REQUIRED_CONFIG_OR_PREVIOUS_STEP_RESULT_ARTIFACT_KEYS

    def _validate_required_config_or_previous_step_result_artifact_keys(self):
        """Validates that the required configuration keys or previous step result artifacts
        are set and have valid values.

        Validates that:
        * required configuration is given
        * either target-host-url or deployed-host-urls is given

        Raises
        ------
        StepRunnerException
            If step configuration or previous step result artifacts have invalid required values
        """
        super()._validate_required_config_or_previous_step_result_artifact_keys()

        # target-host-url or deployed-host-urls must be supplied
        target_host_url = self.get_value('target-host-url')
        deployed_host_urls = self.get_value('deployed-host-urls')
        if (not target_host_url) and (not deployed_host_urls):
            raise StepRunnerException(
                "Either 'target-host-url' or 'deployed-host-urls' needs to be supplied but"
                " neither were."
            )

    def _run_step(self): # pylint: disable=too-many-locals,too-many-statements,too-many-branches
        """Runs the step implemented by this StepImplementer.

        Returns
        -------
        StepResult
            Object containing the dictionary results of this step.
        """
        step_result = StepResult.from_step_implementer(self)

        pom_file = self.get_value('pom-file')
        fail_on_no_tests = self.get_value('fail-on-no-tests')
        selenium_hub_url = self.get_value('selenium-hub-url')
        deployed_host_urls = self.get_value('deployed-host-urls')
        maven_profiles = self.get_value('maven-profiles')

        # NOTE:
        #   at some point may need to do smarter logic if a deployable has more then one deployed
        #   host URL to do UAT against all of them, but for now, use first one as target of UAT
        if isinstance(deployed_host_urls, list):
            target_base_url = deployed_host_urls[0]
            if len(deployed_host_urls) > 1:
                step_result.message = \
                    f"Given more then one deployed host URL ({deployed_host_urls})," \
                    f" targeting first one ({target_base_url}) for user acceptance test (UAT)."
                print(step_result.message)
        elif deployed_host_urls:
            target_base_url = deployed_host_urls
        else:
            target_base_url = self.get_value('target-host-url')

        # ensure surefire plugin enabled
        maven_surefire_plugin = self._get_effective_pom_element(
            element_path=MavenGeneric.SUREFIRE_PLUGIN_XML_ELEMENT_PATH
        )
        if maven_surefire_plugin is None:
            step_result.success = False
            step_result.message = 'Unit test dependency "maven-surefire-plugin" ' \
                f'missing from effective pom ({self._get_effective_pom()}).'
            return step_result

        # get surefire test results dir
        reports_dir = self._get_effective_pom_element(
            element_path=MavenGeneric.SUREFIRE_PLUGIN_REPORTS_DIR_XML_ELEMENT_PATH
        )
        if reports_dir is not None:
            if os.path.isabs(reports_dir.text):
                test_results_dir = reports_dir.text
            else:
                test_results_dir = os.path.join(
                    os.path.dirname(os.path.abspath(pom_file)),
                    reports_dir.text
                )
        else:
            test_results_dir = os.path.join(
                os.path.dirname(os.path.abspath(pom_file)),
                MavenGeneric.DEFAULT_SUREFIRE_PLUGIN_REPORTS_DIR
            )

        cucumber_html_report_path = os.path.join(self.work_dir_path, 'cucumber.html')
        cucumber_json_report_path = os.path.join(self.work_dir_path, 'cucumber.json')
        mvn_output_file_path = self.write_working_file('mvn_test_output.txt')
        try:
            # execute maven step (params come from config)
            self._run_maven_step(
                mvn_output_file_path=mvn_output_file_path,
                step_implementer_additional_arguments=[
                    f'-Dselenium.hub.url={selenium_hub_url}',
                    f'-Dtarget.base.url={target_base_url}',
                    f'-Dcucumber.plugin=' \
                        f'html:{cucumber_html_report_path},' \
                        f'json:{cucumber_json_report_path}',
                ]
            )

            # if not results
            # else add evidence of results
            if not os.path.isdir(test_results_dir) or len(os.listdir(test_results_dir)) == 0:
                if fail_on_no_tests:
                    step_result.message = "No user acceptance tests defined" \
                        f" using maven profile ({maven_profiles})."
                    step_result.success = False
                else:
                    step_result.message = "No user acceptance tests defined" \
                        f" using maven profile ({maven_profiles})," \
                        " but 'fail-on-no-tests' is False."
            else:
                attribs = ["time", "tests", "errors", "skipped", "failures"]
                xml_element = "testsuite"

                report_results = aggregate_xml_element_attribute_values(
                    test_results_dir,
                    xml_element,
                    attribs
                )

                not_found_attribs = []
                for attrib in attribs:
                    if attrib in report_results:
                        step_result.add_evidence(
                            description="Surefire report value for " + attrib,
                            name="uat-evidence-" + attrib,
                            value=report_results[attrib]
                        )
                    else:
                        not_found_attribs.append(attrib)

                if not_found_attribs:
                    #NOTE: not sure if this should be a failure or just a warning...
                    raise ValueError(
                        "Error gathering evidence from "\
                        f"surefire report, expected attribute(s) ({not_found_attribs}) "\
                        f"not found in report ({test_results_dir})"
                    )

        except StepRunnerException as error:
            step_result.success = False
            step_result.message = "Error running 'maven test' to run user acceptance tests. " \
                "More details maybe found in 'maven-output', `surefire-reports`, " \
                "`cucumber-report-html`, and `cucumber-report-json` " \
                f"report artifact: {error}"
        except ValueError as error:
            step_result.message = str(error)
            step_result.success = False
        finally:
            step_result.add_artifact(
                description="Standard out and standard error from maven.",
                name='maven-output',
                value=mvn_output_file_path
            )
            step_result.add_artifact(
                description="Surefire reports generated by maven.",
                name='surefire-reports',
                value=test_results_dir
            )
            step_result.add_artifact(
                description="Cucumber (HTML) report generated by maven.",
                name='cucumber-report-html',
                value=cucumber_html_report_path
            )
            step_result.add_artifact(
                description="Cucumber (JSON) report generated by maven.",
                name='cucumber-report-json',
                value=cucumber_json_report_path
            )

        return step_result
