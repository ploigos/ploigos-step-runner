"""Step Implementer for the 'validate-environment-config' step for configlint.

Reference:  https://stelligent.github.io/config-lint/#/

Step Configuration
------------------

Step configuration key(s) for this step:

| Key               | Required | Default                   | Description
|-------------------|----------|---------------------------|-----------
|                   |          |                           |


Expected Previous Step Results
------------------------------

Results expected from previous steps:

| Step Name           |  Key                | Description
|---------------------|---------------------|------------
| `deploy`            | `report-artifacts`  | name='argocd'
|                     |                       path='file.yml'

Results
-------

Results output by this step:

| Key                              | Description
|----------------------------------|------------
| `result`                         | A dictionary describing the output \
                                     of this step
| `report-artifacts`               | An array of dictionaries describing \
                                     artifacts generated by this step

Elements in `result` dictionary:

| Key          | Description
|--------------|------------
| `success`    | Boolean value describing success/failure of this step
| `message`    | Human readable message describing results of this step

Elements in `report-artifacts` dictionary:

|  Key         | Description
|--------------|------------
| `name`       | Human readable name for report artifact generated by this step
| `path`       | Absolute path (including transport protocol) to the step report artifact


Examples
--------

Example: Step Configuration (minimal)

    validate-environment-configuration:
    - implementer: prep-yada

Example: Generated Config Lint Call (uses both step configuration and previous results)

    config-lint -verbose
        -rules rules.yml ./argcd/file.yml

Example: Existing Rules File (minimal)
    version: 1
    description: Rules for Kubernetes spec files
    type: Kubernetes
    files:
      - "*.yml"
    rules:
    - id: TSSC_LEARN
      severity: FAILURE
      message: Deployment must have testing
      resource: Deployment
      assertions:
        - key: spec.template.metadata.annotations
          op: contains
          value: '"sidecar.istio.io/inject": false'

Example: Results

    'tssc-results': {
        'validate-environment-configuration': {
            'result': {
                'success': True,
                'message': 'config-lint step completed'
            }
    }

"""

import os
from urllib.parse import urlparse

from tssc import TSSCFactory
from tssc import StepImplementer
from tssc import DefaultSteps

DEFAULT_CONFIG = {
}

REQUIRED_CONFIG_KEYS = {
}

AUTHENTICATION_CONFIG = {
}

class ConfiglintFromArgocd(StepImplementer):
    """
    StepImplementer for the tag-source step for Config_lint.
    """

    @staticmethod
    def step_name():
        """
        Getter for the TSSC Step name implemented by this step.

        Returns
        -------
        str
            TSSC step name implemented by this step.
        """
        return DefaultSteps.VALIDATE_ENVIRONMENT_CONFIGURATION

    @staticmethod
    def step_implementer_config_defaults():
        """
        Getter for the StepImplementer's configuration defaults.

        Notes
        -----
        These are the lowest precedence configuration values.

        Returns
        -------
        dict
            Default values to use for step configuration values.
        """
        return DEFAULT_CONFIG

    @staticmethod
    def required_runtime_step_config_keys():
        """
        Getter for step configuration keys that are required before running the step.

        See Also
        --------
        _validate_runtime_step_config

        Returns
        -------
        array_list
            Array of configuration keys that are required before running the step.
        """
        return

    def _validate_runtime_step_config(self, runtime_step_config):
        """
        Validates the given `runtime_step_config` against the required step configuration keys.

        Parameters
        ----------
        runtime_step_config : dict
            Step configuration to use when the StepImplementer runs the step with all of the
            various static, runtime, defaults, and environment configuration munged together.

        Raises
        ------
        AssertionError
            If the given `runtime_step_config` is not valid with a message as to why.
        """

    def _run_step(self, runtime_step_config):
        """
        Runs the TSSC step implemented by this StepImplementer.

        Parameters
        ----------
        runtime_step_config : dict
            Step configuration to use when the StepImplementer runs the step with all of the
            various static, runtime, defaults, and environment configuration munged together.

        Returns
        -------
        dict
            Results of running this step.
        """

        yml_path=''
        if (self.get_step_results('deploy') and
                self.get_step_results('deploy').get('report-artifacts')):
            artifacts = self.get_step_results('deploy').get('report-artifacts')
            for artifact in artifacts:
                name = artifact['name']
                if name == 'argocd-result-set':
                    yml_path = artifact['path']
        else:
            raise ValueError('Deploy results is missing report-artifacts')
        if yml_path == '':
            raise ValueError('Deploy results missing yml element name=argocd-result-set')

        # The expected format:  file:///folder/file.yml
        yml_path = urlparse(yml_path).path
        if not os.path.exists(yml_path):
            raise ValueError(f'File not found {yml_path}')

        results = {
            'result': {
                'success': True,
                'message': 'configlint prep step completed',
            },
            'options': {
                'yml_path': yml_path
            }
        }
        return results


# register step implementer
TSSCFactory.register_step_implementer(ConfiglintFromArgocd)
