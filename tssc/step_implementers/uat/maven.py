"""Step Implementer for the UAT step for Maven generating Cucumber reports.

Step Configuration
------------------

Step configuration expected as input to this step.
Could come from either configuration file or
from runtime configuration.

| Configuration Key  | Required? | Default            | Description
|--------------------|-----------|--------------------|------------
| `fail-on-no-tests` | True      | True               | Value to specify whether unit-test \
                                                        step can succeed when no tests are defined
| `pom-file`         | True      | `'pom.xml'`        | pom used to run tests and check \
                                                        for existence of custom reportsDirectory
| `selenium-hub-url` | True      |                    | URL where the Selenium Hub is running
| `target-base-url`  | True      | result from deploy | URL where the UAT application is running
| `report-dir`       | False     | `'cucumber'`       | Directory to put cucumber tests


Expected Previous Step Results
------------------------------

Results expected from previous steps that this step may require.

| Step Name | Result Key            | Description
|-----------|-----------------------|------------
| `deploy`  | `deploy-endpoint-url` | The git tag to apply to the config repo


Results
-------

Results output by this step.

| Result Key         | Description
|--------------------|------------
| `result`           | A dictionary describing the uat step results
| `options`          | A dictionary of non-standard options used by this step implementer
| `report-artifacts` | An array of dictionaries describing artifacts \
                       generated by this step implementer

**result**
Keys in the `result` dictionary element in the `uat` dictionary of the step results.

| `result` Key | Description
|--------------|------------
| `success`    | Boolean value describing success/failure of this step
| `message`    | Human readable message describing results of this step

**options**
Keys in the `options` dictionary element in the `uat` dictionary of the step results.
These keys are to be minimally displayed only when a non-default value is used.

| `options` Key       | Description
|---------------------|------------
| `pom-path`          | Absolute path to the pom used to run tests
| `fail-on-no-tests`  | Boolean value describing whether or not step should fail \
                        when unit tests are missing
| `selenium-hub-url`  | URL where the Selenium Hub is running
| `target-base-url`   | URL where the UAT application is running

**report-artifacts**
Keys in the `report-artifacts` array in the `unit-test` dictionary of the step results.
Elements in this array are minimally shown when reports are generated. When no reports are \
generated, this array remains empty.

| `report-artifacts` Key | Description
|------------------------|------------
| `name`                 | Human readable name for report artifact generated by this step
| `path`                 | Absolute path (including transport protocol) to the step report artifact
"""
import sys
import os
import sh

from tssc import StepImplementer
from tssc import DefaultSteps
from tssc.utils.xml import get_xml_element_by_path

DEFAULT_CONFIG = {
    'fail-on-no-tests': True,
    'pom-file': 'pom.xml',
    'target-base-url': None,
    'report-dir': 'cucumber'
}

REQUIRED_CONFIG_KEYS = [
    'fail-on-no-tests',
    'pom-file',
    'selenium-hub-url',
    'report-dir'
]

class Maven(StepImplementer):
    """
    StepImplementer for the unit-test step for Maven generating Cucumber reports.
    """

    @staticmethod
    def step_implementer_config_defaults():
        """
        Getter for the StepImplementer's configuration defaults.

        Notes
        -----
        These are the lowest precedence configuration values.

        Returns
        -------
        dict
            Default values to use for step configuration values.
        """
        return DEFAULT_CONFIG

    @staticmethod
    def required_runtime_step_config_keys():
        """
        Getter for step configuration keys that are required before running the step.

        See Also
        --------
        _validate_runtime_step_config

        Returns
        -------
        array_list
            Array of configuration keys that are required before running the step.
        """
        return REQUIRED_CONFIG_KEYS

    def _get_target_base_url(self):
        """Gets the target-base-url.

        Gets the target-base-url first from the configs. If not found
        attempt to pull it from a previous deploy step.

        If still unable to find, then throw ValueError.
        """
        target_base_url = self.get_config_value('target-base-url')
        if target_base_url is None:
            deploy_config = self.get_step_results(DefaultSteps.DEPLOY)
            if deploy_config is not None:
                result = deploy_config.get('result')
                if result is not None:
                    target_base_url = result.get('deploy-endpoint-url')

        if target_base_url is None:
            raise ValueError('No target base url was specified')

        return target_base_url

    def _run_step(self):
        """
        Runs the TSSC step implemented by this StepImplementer.

        Parameters
        ----------
        runtime_step_config : dict
            Step configuration to use when the StepImplementer runs the step with all of the
            various static, runtime, defaults, and environment configuration munged together.

        Returns
        -------
        dict
            Results of running this step.
        """
        pom_file = self.get_config_value('pom-file')
        fail_on_no_tests = self.get_config_value('fail-on-no-tests')
        selenium_hub_url = self.get_config_value('selenium-hub-url')
        report_dir = self.get_config_value('report-dir')
        target_base_url = self._get_target_base_url()

        if not os.path.exists(pom_file):
            raise ValueError(f'Given pom file does not exist: {pom_file}')

        surefire_path = 'mvn:build/mvn:plugins/mvn:plugin/[mvn:artifactId="maven-surefire-plugin"]'
        maven_surefire_plugin = get_xml_element_by_path(
            pom_file,
            surefire_path,
            default_namespace='mvn'
        )
        if maven_surefire_plugin is None:
            raise ValueError('Uat dependency "maven-surefire-plugin" missing from POM.')

        reports_dir = get_xml_element_by_path(
            pom_file,
            f'{surefire_path}/mvn:configuration/mvn:reportsDirectory',
            default_namespace='mvn'
        )
        if reports_dir is not None:
            test_results_dir = reports_dir.text
        else:
            test_results_dir = os.path.join(
                os.path.dirname(os.path.abspath(pom_file)),
                'target/surefire-reports')

        try:
            sh.mvn(  # pylint: disable=no-member
                'clean',
                '-Pintegration-test',
                f'-Dselenium.hub.url={selenium_hub_url}',
                f'-Dtarget.base.url={target_base_url}',
                f'-Dcucumber.plugin=html:target/{report_dir}/cucumber.html,' \
                    f'json:target/{report_dir}/cucumber.json',
                'test',
                '-f', pom_file,
                _out=sys.stdout,
                _err=sys.stderr
            )
        except sh.ErrorReturnCode as error:
            raise RuntimeError(f'Error invoking mvn: {error}') from error

        if not os.path.isdir(test_results_dir) or \
            len(os.listdir(test_results_dir)) == 0:
            if fail_on_no_tests is not True:
                results = {
                    'result': {
                        'success': True,
                        'message': 'Uat step run successfully, but no tests were found'
                    },
                    'report-artifacts': [],
                    'options': {
                        'pom-path': pom_file,
                        'fail-on-no-tests': False
                    }
                }
            else:# pragma: no cover
                # Added 'no cover' to bypass missing uat step coverage error
                # that is covered by the following test:
                #   test_uat_run_attempt_fails_fail_on_no_tests_flag_true
                raise RuntimeError('Error: No uat defined')
        else:
            results = {
                'result': {
                    'success': True,
                    'message': 'Uat step run successfully and reports were generated'
                },
                'options': {
                    'pom-path': pom_file
                },
                'report-artifacts': [
                    {
                        'name': 'Uat results generated',
                        'path': f'file://{os.path.dirname(os.path.abspath(pom_file))}' \
                            f'/target/{report_dir}'
                    }
                ]
            }
        return results
