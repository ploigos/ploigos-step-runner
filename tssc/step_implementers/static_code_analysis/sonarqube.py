"""Step Implementer for the static-code-analysis step for SonarQube.

Step Configuration
------------------

Step configuration expected as input to this step.
Could come from either configuration file or
from runtime configuration.
(Reference:  https://docs.sonarqube.org/latest/analysis/analysis-parameters)

| Configuration Key | Required? | Default                    | Description
|-------------------|-----------|----------------------------|-----------
| `properties'      | True      | './sonar-project.proerties'| Properties file
| `url'             | True      | None                       | SonarQube host url
                                                               (sonar.host.url)
| `user`            | False     | None                       | SonarQube user id
                                                               (sonar.login)
| `password`        | False     | None                       | SonarQube password
                                                               (sonar.password)

Expected Previous Step Results
------------------------------

Results expected from previous steps that this step requires.
| Step Name           | Result Key | Description
|---------------------|------------|------------
| `generate-metadata` | `version`  |  SonarQube project version (sonar.projectVersion)

Results
-------

Results output by this step.

| Result Key         | Description
|--------------------|------------
| `result`           | A dictionary describing the results of this step
| `report-artifacts` | An array of dictionaries describing
                       artifacts generated by this step

**result**
Keys in the `result` dictionary element in the `unit-test` dictionary of the step results.

| `result` Key | Description
|--------------|------------
| `success`    | Boolean value describing success/failure of this step
| `message`    | Human readable message describing results of this step

**report-artifacts**
Keys in the `report-artifacts` array in the `static_code_analysis` dictionary of the step results.

| `report-artifacts` Key | Description
|------------------------|------------
| `name`                 | Human readable name for report artifact generated by this step
| `path`                 | Absolute path (including transport protocol) to the step report artifact

**Example**

    'tssc-results': {
        'static_code_analysis': {
            'result': {
                            'success': True,
                            'message': 'sonarqube step completed - see report-artifacts'
            },
            'report-artifacts': [
                {
                  'name': 'sonarqube result set',
                  'path': 'file://folder/report-task.txt'
                }
             ]
         }
    }
"""

import os
import sys
import sh
from tssc import TSSCFactory
from tssc import StepImplementer
from tssc import DefaultSteps

DEFAULT_CONFIG = {
    'properties': './sonar-project.properties'
}

AUTHENTICATION_CONFIG = {
    'user': None,
    'password': None
}

REQUIRED_CONFIG_KEYS = [
    'url',
    'application-name',
    'service-name'
]


class SonarQube(StepImplementer):
    """
    StepImplementer for the tag-source step for SonarQube.
    """

    @staticmethod
    def step_name():
        """
        Getter for the TSSC Step name implemented by this step.

        Returns
        -------
        str
            TSSC step name implemented by this step.
        """
        return DefaultSteps.STATIC_CODE_ANALYSIS

    @staticmethod
    def step_implementer_config_defaults():
        """
        Getter for the StepImplementer's configuration defaults.

        Notes
        -----
        These are the lowest precedence configuration values.

        Returns
        -------
        dict
            Default values to use for step configuration values.
        """
        return DEFAULT_CONFIG

    @staticmethod
    def required_runtime_step_config_keys():
        """
        Getter for step configuration keys that are required before running the step.

        See Also
        --------
        _validate_runtime_step_config

        Returns
        -------
        array_list
            Array of configuration keys that are required before running the step.
        """
        return REQUIRED_CONFIG_KEYS

    def _validate_runtime_step_config(self, runtime_step_config):
        """
        Validates the given `runtime_step_config` against the required step configuration keys.

        Parameters
        ----------
        runtime_step_config : dict
            Step configuration to use when the StepImplementer runs the step with all of the
            various static, runtime, defaults, and environment configuration munged together.

        Raises
        ------
        AssertionError
            If the given `runtime_step_config` is not valid with a message as to why.
        """
        super()._validate_runtime_step_config(runtime_step_config)  # pylint: disable=protected-access

        assert (
            all(element in runtime_step_config for element in AUTHENTICATION_CONFIG) or not any(
                element in runtime_step_config for element in AUTHENTICATION_CONFIG) \
            ), 'Either username or password is not set. Neither or both must be set.'

    def _run_step(self, runtime_step_config):
        """
        Runs the TSSC step implemented by this StepImplementer.

        Parameters
        ----------
        runtime_step_config : dict
            Step configuration to use when the StepImplementer runs the step with all of the
            various static, runtime, defaults, and environment configuration munged together.

        Returns
        -------
        dict
            Results of running this step.
        """

        # Optional: user and password
        user = ''
        password = ''
        if any(element in runtime_step_config for element in AUTHENTICATION_CONFIG):
            if (runtime_step_config.get('user')
                    and runtime_step_config.get('password')):
                user = runtime_step_config.get('user')
                password = runtime_step_config.get('password')

        # Required: Get the generate-metadata.version
        if (self.get_step_results('generate-metadata') and
                self.get_step_results('generate-metadata').get('version')):
            version = self.get_step_results('generate-metadata')['version']
        else:
            raise ValueError('Severe error: Generate-metadata results is missing a version tag')

        # Required: properties and exists
        properties_file = runtime_step_config['properties']
        if not os.path.exists(properties_file):
            raise ValueError('Properties file in tssc config not found: ' + properties_file)

        try:
            # Hint:  Call sonar-scanner with sh.sonar_scanner
            #    https://amoffat.github.io/sh/sections/faq.html
            working_directory = os.path.join(os.getcwd(), 'sonar-scanner')
            if user == '':
                sh.sonar_scanner(  # pylint: disable=no-member
                    '-Dproject.settings=' + runtime_step_config['properties'],
                    '-Dsonar.host.url=' + runtime_step_config['url'],
                    '-Dsonar.projectVersion=' + version,
                    '-Dsonar.projectKey=' + \
                        runtime_step_config['application-name'] + \
                        ':' + \
                        runtime_step_config['service-name'],
                    '-Dsonar.working.directory=' + working_directory,
                    _out=sys.stdout
                )
            else:
                sh.sonar_scanner(  # pylint: disable=no-member
                    '-Dproject.settings=' + runtime_step_config['properties'],
                    '-Dsonar.host.url=' + runtime_step_config['url'],
                    '-Dsonar.projectVersion=' + version,
                    '-Dsonar.projectKey=' + \
                        runtime_step_config['application-name'] + \
                        ':' + \
                        runtime_step_config['service-name'],
                    '-Dsonar.login=' + user,
                    '-Dsonar.password=' + password,
                    '-Dsonar.working.directory=' + working_directory,
                    _out=sys.stdout
                )

        except sh.ErrorReturnCode as error:  # pylint: disable=undefined-variable
            raise RuntimeError('Error invoking sonarscanner: {all}'.format(all=error)) from error

        results = {
            'result': {
                'success': True,
                'message': 'sonarqube step completed - see report-artifacts',
            },
            'report-artifacts': [
                {
                    'name': 'sonarqube result set',
                    'path': 'file://' + working_directory + '/report-task.txt'
                }
            ]
        }
        return results


# register step implementer
TSSCFactory.register_step_implementer(SonarQube)
